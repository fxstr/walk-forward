import { performance } from 'perf_hooks';
import groupBy from '../dataHelpers/groupBy.mjs';
import tradeForDate from './tradeForDate.mjs';
import logger from '../logger/logger.mjs';
import spinner from '../spinner/spinner.mjs';
import createMargins from './calculateMargins.mjs';

const { debug } = logger('WalkForward:trade');

/**
 * Executes a trading strategy for every date.
 * @param  {Object} data    Data as generated by useData()
 * @return {Object}         The result of our trades, usually with one entry per bar, with the
 *                          following properties:
 *                          - cash: the amount of money not invested. Array of objects with
 *                            properties date and cash
 *                          - orders: Array of Maps, …
 */
export default (data, capital) => {

    const startTime = performance.now();
    const output = spinner('Start trading …');

    if (typeof capital !== 'number') {
        throw new Error(`trade: Pass parameter capital that is a number; you passed ${capital} instead.`);
    }


    // Map.<number, Map[]>: timeSeries grouped by date
    const timeSeriesGroupedByDate = groupBy(
        data.timeSeries,
        item => item.get('date'),
    );

    // Map.<number, object[]>: Instructions grouped by date
    const instructionsGroupedByDate = new Map(groupBy(
        data.instructions,
        ({ date }) => date,
    ));


    // Object.<string, number>[]: Margins for every entry in timeSeries
    const relativeMarginsGroupedByDate = new Map(groupBy(
        createMargins(data.timeSeries, data.instrumentKey, data.configuration.getMargin),
        ({ date }) => date,
    ));


    // Create positions/orders for every entry in timeSeries
    const tradeResult = timeSeriesGroupedByDate.reduce((
        previous,
        [date, timeSeriesEntries],
        index,
    ) => {

        // Get instructions for current date
        const instructionSet = instructionsGroupedByDate.get(date);
        // Get current margins, transform to Map.<string, number>
        const currentRelativeMargins = new Map(groupBy(
            relativeMarginsGroupedByDate.get(date),
            ({ instrument }) => instrument,
        ).map(([instrumentName, marginData]) => [instrumentName, marginData[0].margin]));

        // Creates a Map.<string, number> from timeSeries where key is the instrument name and
        // value is the price type (e.g. 'open')
        const getPriceType = (series, type) => new Map(series
            .map(entry => [entry.get(data.instrumentKey), entry.get(type)]));

        // Map with key: instrumentName, value: opening/closing price
        const openPrices = getPriceType(timeSeriesEntries, 'open');
        const closePrices = getPriceType(timeSeriesEntries, 'close');
        const instructionFieldPrices = getPriceType(
            timeSeriesEntries,
            data.configuration.instructionField,
        );

        const previousEntry = previous.slice(-1).pop();

        const result = tradeForDate(
            date,
            openPrices,
            closePrices,
            instructionFieldPrices,
            instructionSet,
            // Configuration
            {
                investedRatio: data.configuration.investedRatio,
                maxRatioPerInstrument: data.configuration.maxRatioPerInstrument,
                getPointValue: data.configuration.getPointValue,
            },
            currentRelativeMargins,
            // Previous data
            {
                orders: previousEntry.orders,
                positions: previousEntry.positions,
                cash: previousEntry.cash,
                positionValues: previousEntry.positionValues,
            },
        );

        // On first run, previous are the initial values (-1) – don't store them
        if (index === 0) return [result];
        return [...previous, result];

    }, [{
        cash: capital,
        positionValues: new Map(),
        // Orders are executed on open, where they are taken as 'left overs' from the previous
        // close; therefore, let's start with an empty order from the bar *before* we started
        // our trades
        orders: new Map(),
        // Array of orders, see createOrder.mjs
        positions: [],
    }]);

    debug(
        'Trades executed, final amount is %d',
        tradeResult.cash + Array
            .from(tradeResult.slice(-1).pop().positionValues.values())
            .reduce((prev, value) => prev + value, 0),
    );

    const endTime = performance.now();
    const totalTime = Math.round(endTime - startTime);
    const timePerEntry = Math.round((totalTime / timeSeriesGroupedByDate.length) * 100) / 100;
    output.succeed(`Trading done for ${timeSeriesGroupedByDate.length} dates in ${totalTime} ms, ${timePerEntry} ms per entry`);

    return {
        ...data,
        result: tradeResult,
    };

};
